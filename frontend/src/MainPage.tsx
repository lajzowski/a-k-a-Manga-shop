import React from 'react';
import {
  Box, Typography, Paper, CircularProgress, Alert,
  Accordion, AccordionSummary, AccordionDetails,
  List, ListItem, ListItemText, Chip, Divider, Tooltip
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import useAuthorsReportData from './useAuthorsReportData';

const RiskAuthorsWidget: React.FC = () => {
  const { data, loading, error } = useAuthorsReportData();

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–≤—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–∫—É–ø–∏–ª–∏ –∞—Ä–µ–Ω–¥—É –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ—à–µ–¥—à–∏–º –Ω–µ–¥–µ–ª—è–º (8 –Ω–µ–¥–µ–ª—å = 2 –º–µ—Å—è—Ü–∞)
  const riskAuthors = React.useMemo(() => {
    const now = new Date();
    return data
      .filter(group => group.rent && !isNaN(Number(group.rent)) && group.settlementDate)
      .map(group => {
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è
        let settlementDate: Date | null = null;
        if (!group.settlementDate) return null;
        const parts = group.settlementDate.split('.');
        if (parts.length === 2) {
          const day = Number(parts[0]);
          const month = Number(parts[1]);
          const year = now.getFullYear();
          settlementDate = new Date(year, month - 1, day);
        } else if (parts.length === 3) {
          const day = Number(parts[0]);
          const month = Number(parts[1]);
          const year = Number(parts[2]);
          settlementDate = new Date(year, month - 1, day);
        }
        if (!settlementDate) return null;
        const rent = Number(group.rent);
        const authorAmount = Number(group.authorAmount);
        const daysOnShelf = (now.getTime() - settlementDate.getTime()) / (1000 * 60 * 60 * 24);
        const weeksOnShelf = Math.floor(daysOnShelf / 7);
        const mustEarn = Math.min(weeksOnShelf, 8) * (rent / 8);
        const deficit = mustEarn - authorAmount;
        return {
          ...group,
          settlementDateObj: settlementDate,
          daysOnShelf: Math.floor(daysOnShelf),
          weeksOnShelf,
          mustEarn,
          deficit,
          rent,
          authorAmount,
        };
      })
      .filter((group): group is NonNullable<typeof group> => !!group && group.weeksOnShelf > 0 && group.authorAmount < group.mustEarn);
  }, [data]);

  // –°—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É (max): –ø–æ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–∫—É–ø–∏–ª–∏ –∞—Ä–µ–Ω–¥—É
  const totalToReturnMax = React.useMemo(() => {
    return data.reduce((sum, group) => {
      const rent = Number(group.rent);
      const authorAmount = Number(group.authorAmount);
      if (!isNaN(rent) && !isNaN(authorAmount) && authorAmount < rent) {
        return sum + (rent - authorAmount);
      }
      return sum;
    }, 0);
  }, [data]);

  // –°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å (–∞—Ä–µ–Ω–¥–∞ - —Å–∫–æ–ª—å–∫–æ –æ–∫—É–ø–∏–ª–∏)
  const totalToReturn = React.useMemo(() => {
    return riskAuthors.reduce((sum, group) => {
      const rent = Number(group.rent);
      const authorAmount = Number(group.authorAmount);
      if (isNaN(rent) || isNaN(authorAmount)) return sum;
      return sum + (rent - authorAmount);
    }, 0);
  }, [riskAuthors]);

  if (loading) return <Box my={2}><CircularProgress size={24} /></Box>;
  if (error) return <Alert severity="error">{error}</Alert>;
  if (riskAuthors.length === 0) return <Typography>–ù–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ —Ä–∏—Å–∫–∞ üéâ</Typography>;

  return (
    <Box>
      <Typography variant="subtitle1" sx={{ mb: 1, display: 'flex', alignItems: 'center', gap: 1 }}>
        <Tooltip title="–ï—Å–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ —É —ç—Ç–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ –ø—Ä–µ–∫—Ä–∞—Ç—è—Ç—Å—è, —Å—Ç–æ–ª—å–∫–æ –ø—Ä–∏–¥—ë—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å. –°—á–∏—Ç–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ –Ω–µ –æ–∫—É–ø–∏–ª –∞—Ä–µ–Ω–¥—É –ø–æ–ª–Ω–æ—Å—Ç—å—é.">
          <span>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞</span>
        </Tooltip>
        <b>{!isNaN(totalToReturnMax) ? totalToReturnMax.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' }) : '-'}</b>
      </Typography>
      <Typography variant="subtitle1" sx={{ mb: 1, display: 'flex', alignItems: 'center', gap: 1 }}>
        <Tooltip title="–¢–µ, –∫—Ç–æ —É–∂–µ —Å–µ–π—á–∞—Å –Ω–µ —É—Å–ø–µ–≤–∞—é—Ç –æ–∫—É–ø–∏—Ç—å –∞—Ä–µ–Ω–¥—É –ø–æ –≥—Ä–∞—Ñ–∏–∫—É (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ—à–µ–¥—à–∏–º –Ω–µ–¥–µ–ª—è–º). –≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Ä–∏—Å–∫.">
          <span>–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞</span>
        </Tooltip>
        <b>{!isNaN(totalToReturn) ? totalToReturn.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' }) : '-'}</b>
      </Typography>
      <Divider sx={{ mb: 2 }} />
      <Accordion sx={{ borderRadius: 2, boxShadow: 1 }}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
            –ì—Ä—É–ø–ø—ã –≤ –≥—Ä—É–ø–ø–µ —Ä–∏—Å–∫–∞ ({riskAuthors.length})
          </Typography>
        </AccordionSummary>
        <AccordionDetails sx={{ p: 0 }}>
          <List dense>
            {riskAuthors.map(group => {
              const toReturn = group.rent - group.authorAmount;
              const settlementDateStr = group.settlementDateObj ? group.settlementDateObj.toLocaleDateString('ru-RU') : group.settlementDate;
              return (
                <ListItem key={group.groupNumber} sx={{ py: 0.5, px: 1, minHeight: 36 }} disableGutters>
                  <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', gap: 1, flexWrap: 'wrap' }}>
                    <Typography variant="body2" sx={{ fontWeight: 500, minWidth: 70 }}>–ì—Ä—É–ø–ø–∞ {group.groupNumber}</Typography>
                    <Chip label="–í –≥—Ä—É–ø–ø–µ —Ä–∏—Å–∫–∞" color="error" size="small" sx={{ fontWeight: 600, height: 22 }} />
                    <Typography variant="body2" sx={{ ml: 1, minWidth: 90 }}>
                      –ù–µ–¥.: <b>{group.weeksOnShelf}</b>
                    </Typography>
                    <Typography variant="body2" sx={{ ml: 1, minWidth: 120 }}>
                      –î–æ–ª–∂–µ–Ω –±—ã–ª: <b>{group.mustEarn.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' })}</b>
                    </Typography>
                    <Typography variant="body2" sx={{ ml: 1, minWidth: 120 }}>
                      –û–∫—É–ø–∏–ª: <b>{group.authorAmount.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' })}</b>
                    </Typography>
                    <Typography variant="body2" sx={{ ml: 1, minWidth: 120, color: '#d32f2f' }}>
                      –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{group.deficit.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' })}</b>
                    </Typography>
                    <Box sx={{ flexGrow: 1 }} />
                    <Typography variant="body2" color="text.secondary" sx={{ minWidth: 110, textAlign: 'right' }}>
                      {settlementDateStr ? `–ó–∞—Å–µ–ª–µ–Ω–∏–µ: ${settlementDateStr}` : ''}
                    </Typography>
                  </Box>
                </ListItem>
              );
            })}
          </List>
        </AccordionDetails>
      </Accordion>
    </Box>
  );
};

const MainPage: React.FC = () => {
  return (
    <Box>
      <Typography variant="h4" gutterBottom>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</Typography>
      <Paper sx={{ p: 2, mt: 2 }}>
        <Typography variant="h6">–ê–≤—Ç–æ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ —Ä–∏—Å–∫–∞</Typography>
        <RiskAuthorsWidget />
      </Paper>
    </Box>
  );
};

export default MainPage; 